var mimir = require('./index'),
  bow = mimir.bow,
  dict = mimir.dict,
  tfidf = mimir.tfidf,
  tokenize = mimir.tokenize;
  compare = mimir.compare

// console.log('\n---------- BOW -----------------\n');

// var texts = ["I like\n, : ; chocolate",
//   "Chocolate; is great",
//   "I like  --boar ragu'",
//   "I don't like artichokes"
// ];
// var texts = [ "d e f","a b c d"]

var textlist = [
  "World War II, also known as the Second World War (after the recent Great War), was a global war that lasted from 1939 to 1945. World War II is the deadliest conflict in human history",
  "Germanic paganism refers to the theology and religious practices of the Germanic peoples from the Iron Age until their Christianization during the Medieval period.",
  "The Cleveland Bay is a breed of horse that originated in England during the 17th century, named for its consistent bay colouring and the Cleveland district of Yorkshire. It is a strong, well-muscled horse breed, the oldest established breed in England, and the only non-draught horse developed in Great Britain. The ancestors of the breed were developed during the Middle Ages for use as pack horses"
];
var doc = "from"
var voc = dict(textlist);


// console.log(dict)
// console.log(voc)

var bowDoc = bow(doc, voc) 
var tfidfDoc = []
bowDoc.forEach((element, index) => {
  tfidfDoc.push(tfidf(element, voc.words[index], textlist))
})

console.log(bowDoc)
console.log(tfidfDoc)

var bowAllDocs = []
textlist.forEach(t => {
  bowAllDocs.push(bow(t, voc))
})

// console.log('\n---------- TD-IDF --------------\n');


// var textlist1 = ["a a b c c c c c e f c b a a a a", "d a z l k j d e a a a a", "a a d j m k j lkadjf a d"]
var tfidfAllDocs = []
bowAllDocs.forEach(b => {
  var score = []
  b.forEach( (element, index) => {
    score.push(tfidf(element, voc.words[index] ,textlist))
  })
  tfidfAllDocs.push(score)
  // console.log('Most important words in document', index + 1);
  // var scores = {};
  // tokenize(t).forEach(function (word) {
  //   scores[word] = tfidf(word, t, texts);
  // });
  // scores = Object.keys(scores).map(function (a) {
  //   return scores
  // });
  // scores.sort(function (a, b) {
  //   return a.score < b.score ? 1 : -1;
  // });
  // console.log(scores.splice(0, 3));
  // console.log(scores)
});
var similarityScore = [],
    similarityScoreBOW = []
tfidfAllDocs.forEach(t => {
  
  similarityScore.push(compare(tfidfDoc, t))
})
bowAllDocs.forEach(b => {
  similarityScoreBOW.push(compare(bowDoc, b))
})
// console.log(compare(numbers, numbers))
console.log(similarityScore)
console.log(similarityScoreBOW)
// console.log(bowAllDocs)
// console.log(tfidfAllDocs)
