(function () {

  function tokenize(text) {
    return text
      // .replace(/'/g, ' ')
      .replace(/\W/g, ' ')
      .replace(/\s\s+/g, ' ')
      .split(' ').map(function (s) {
        return s.toLowerCase();
      });
  }
  
  function extractDictionary(textArray) {
    let dict = textArray.flatMap(text => tokenize(text)).reduce((dictionary, word) => {
      if(word in dictionary)
        dictionary[word] +=1
      else 
        dictionary[word] = 1
      return dictionary
    }, {})

    return {
      words: Object.keys(dict),
      dict: dict
    }
  }

  function bow(text, vocabulary) {
    var dict = extractDictionary([text]).dict,
      vector = [];

    vocabulary.words.forEach(function (word) {
      vector.push(dict[word] || 0);
    });
    return vector;
  }

  // function wordInDocsCount(word, textlist) {
  //   var sum = 0;
  //   textlist.forEach(function (text) {
  //     sum += tokenize(text).includes(word) === true ? 1 : 0
  //   });
  //   return sum;
  // }
  function distinctWords(text) {
    return new Set(tokenize(text))
  }

  function countOccurences(dict, words) {
    words.forEach(word => {
      if (word in dict)
        dict[word] += 1
      else
        dict[word] = 1
    })
    return dict
  }

  function wordInDocsCount(textlist) {
    return textlist.map(distinctWords).reduce(countOccurences, {})
  }
  
  // function idf(word, textlist) {
  //   return Math.log(textlist.length / (1 + wordInDocsCount(word, textlist)));
  // }

  function idf(wordCount, textlist) {
    return Math.log(textlist.Length / (1 + wordCount))
  }

  function tfidf(bowElement, wordCount, textlist) {
    return bowElement * idf(wordCount, textlist);
  }

  function compare(v1, v2) {
    let scalar = 0,
        v1Length = 0,
        v2Length = 0
    
    v1.forEach((element, index) => {
      scalar += v1[index]*v2[index]
    })

    v1Length = v1.reduce((total, a) => total + a*a, 0)
    v2Length = v2.reduce((total, a) => total + a*a, 0)
  
    return scalar / (Math.sqrt(v1Length) * Math.sqrt(v2Length))
  }

  module.exports = {
    dict: extractDictionary,
    bow: bow,
    tfidf: tfidf,
    tokenize: tokenize,
    compare: compare,
    wordInDocsCount: wordInDocsCount,
    idf: idf
  };

}());
